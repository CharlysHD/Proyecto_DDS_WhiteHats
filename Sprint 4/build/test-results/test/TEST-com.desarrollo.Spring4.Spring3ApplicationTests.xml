<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.desarrollo.Spring4.Spring3ApplicationTests" tests="1" skipped="0" failures="0" errors="0" timestamp="2023-11-13T18:39:30" hostname="LV-PCMR" time="0.571">
  <properties/>
  <testcase name="contextLoads()" classname="com.desarrollo.Spring4.Spring3ApplicationTests" time="0.571"/>
  <system-out><![CDATA[15:39:22.869 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.desarrollo.Spring4.Spring3ApplicationTests]: Spring3ApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
15:39:22.994 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.desarrollo.Spring4.Spring4Application for test class com.desarrollo.Spring4.Spring3ApplicationTests

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.1.4)

2023-11-13T15:39:23.505-03:00  INFO 12412 --- [    Test worker] c.d.Spring4.Spring3ApplicationTests      : Starting Spring3ApplicationTests using Java 17.0.8 with PID 12412 (started by Usuario in C:\Users\Usuario\Documents\SISTEMAS\3ro\Desarrollo SW\Sprints\Ajpa\sprint 4\Proyecto_DDS_WhiteHats\Sprint 4)
2023-11-13T15:39:23.507-03:00  INFO 12412 --- [    Test worker] c.d.Spring4.Spring3ApplicationTests      : No active profile set, falling back to 1 default profile: "default"
2023-11-13T15:39:24.644-03:00  INFO 12412 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-11-13T15:39:24.813-03:00  INFO 12412 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 156 ms. Found 16 JPA repository interfaces.
2023-11-13T15:39:25.479-03:00  INFO 12412 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2023-11-13T15:39:25.573-03:00  INFO 12412 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.2.9.Final
2023-11-13T15:39:25.576-03:00  INFO 12412 --- [    Test worker] org.hibernate.cfg.Environment            : HHH000406: Using bytecode reflection optimizer
2023-11-13T15:39:25.758-03:00  INFO 12412 --- [    Test worker] o.h.e.boot.internal.EnversServiceImpl    : Envers integration enabled? : true
2023-11-13T15:39:25.789-03:00  INFO 12412 --- [    Test worker] o.h.b.i.BytecodeProviderInitiator        : HHH000021: Bytecode provider name : bytebuddy
2023-11-13T15:39:25.994-03:00  INFO 12412 --- [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2023-11-13T15:39:26.016-03:00  INFO 12412 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2023-11-13T15:39:26.335-03:00  INFO 12412 --- [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:file:./theWhiteHatsdb user=SA
2023-11-13T15:39:26.338-03:00  INFO 12412 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2023-11-13T15:39:26.862-03:00  INFO 12412 --- [    Test worker] o.h.b.i.BytecodeProviderInitiator        : HHH000021: Bytecode provider name : bytebuddy
2023-11-13T15:39:27.898-03:00  INFO 12412 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Hibernate: drop table if exists articulo_insumo cascade 
Hibernate: drop table if exists cliente cascade 
Hibernate: drop table if exists detalle_factura cascade 
Hibernate: drop table if exists detalle_pedido cascade 
Hibernate: drop table if exists detalle_producto cascade 
Hibernate: drop table if exists domicilio cascade 
Hibernate: drop table if exists dtorating_cliente cascade 
Hibernate: drop table if exists dtorating_producto cascade 
Hibernate: drop table if exists empleado cascade 
Hibernate: drop table if exists factura cascade 
Hibernate: drop table if exists pedido cascade 
Hibernate: drop table if exists producto cascade 
Hibernate: drop table if exists rubro cascade 
Hibernate: drop table if exists unidad_medida cascade 
Hibernate: drop table if exists usuario cascade 
Hibernate: drop table if exists venta cascade 
Hibernate: drop table if exists "venta-factura" cascade 
Hibernate: create table articulo_insumo (precio_compra numeric(10,2), stock_actual numeric(10,2), stock_minimo numeric(10,2), fecha_alta timestamp(6), fecha_baja timestamp(6), fecha_modificacion timestamp(6), id bigint generated by default as identity, id_unidad_medida bigint, "rubro-id" bigint, denominacion varchar(255), receta varchar(255), url_imagen varchar(255), primary key (id))
Hibernate: create table cliente (fecha_alta timestamp(6), fecha_baja timestamp(6), fecha_modificacion timestamp(6), id bigint generated by default as identity, id_usuario bigint unique, apellido varchar(255), email varchar(255), nombre varchar(255), telefono varchar(255), primary key (id))
Hibernate: create table detalle_factura (cantidad integer, subtotal numeric(10,2), id bigint generated by default as identity, id_articulo_insumo bigint, id_factura bigint, id_producto bigint, primary key (id))
Hibernate: create table detalle_pedido (cantidad integer, subtotal numeric(10,2), subtotal_costo numeric(10,2), id bigint generated by default as identity, id_articulo_insumo bigint, id_pedido bigint, id_producto bigint, primary key (id))
Hibernate: create table detalle_producto (cantidad numeric(10,2), rating tinyint check (rating between 0 and 1), id bigint generated by default as identity, id_articulo_insumo bigint, id_producto bigint, "rubro-id" bigint, receta varchar(255), primary key (id))
Hibernate: create table domicilio (codigo_postal integer, numero integer, numero_vivienda integer, piso_vivienda integer, fecha_alta timestamp(6), fecha_baja timestamp(6), fecha_modificacion timestamp(6), id bigint generated by default as identity, "id-empleado" bigint, id_cliente bigint, calle varchar(500), localidad varchar(255), primary key (id))
Hibernate: create table dtorating_cliente (cantidad integer, rating_cliente numeric(38,2), total numeric(38,2), id bigint generated by default as identity, cliente varbinary(255), primary key (id))
Hibernate: create table dtorating_producto (rating_insumo numeric(38,2), id bigint generated by default as identity, denominacion varchar(255), producto varbinary(255), primary key (id))
Hibernate: create table empleado (rol tinyint check (rol between 0 and 2), fecha_alta timestamp(6), fecha_baja timestamp(6), fecha_modificacion timestamp(6), id bigint generated by default as identity, id_usuario bigint unique, apellido varchar(255), email varchar(255), nombre varchar(255), telefono varchar(255), primary key (id))
Hibernate: create table factura (total_venta numeric(10,2), fecha_alta timestamp(6), fecha_baja timestamp(6), fecha_facturacion timestamp(6), fecha_modificacion timestamp(6), id bigint generated by default as identity, id_pedido bigint unique, mp_merchant_order_id bigint, mp_payment_id bigint, mp_payment_type bigint, mp_preference_id bigint, forma_pago varchar(255) check (forma_pago in ('EFECTIVO','MERCADO_PAGO')), primary key (id))
Hibernate: create table pedido (total numeric(10,2), total_costo numeric(10,2), fecha_alta timestamp(6), fecha_baja timestamp(6), fecha_modificacion timestamp(6), fecha_pedido timestamp(6), hora_estimada_finalizacion timestamp(6), id bigint generated by default as identity, id_cliente bigint, id_domicilio_entrega bigint, estado varchar(255) check (estado in ('PENDIENTE_PAGO','PAGADO','EN_COCINA','PENDIENTE_ENTREGA','DELIVERY','CANCELADO','NOTA_CREDITO','ENTREGADO')), forma_pago varchar(255) check (forma_pago in ('EFECTIVO','MERCADO_PAGO')), tipo_envio varchar(255) check (tipo_envio in ('DELIVERY','RETIRO')), primary key (id))
Hibernate: create table producto (costo numeric(10,2), precio_venta numeric(10,2), tiempo_estimado_cocina integer, fecha_alta timestamp(6), fecha_baja timestamp(6), fecha_modificacion timestamp(6), id bigint generated by default as identity, url_imagen varchar(500), descripcion varchar(1000), denominacion varchar(255), primary key (id))
Hibernate: create table rubro (fecha_alta timestamp(6), fecha_baja timestamp(6), fecha_modificacion timestamp(6), id bigint generated by default as identity, rubro_padre_id bigint, denominacion varchar(255), primary key (id))
Hibernate: create table unidad_medida (fecha_alta timestamp(6), fecha_baja timestamp(6), fecha_modificacion timestamp(6), id bigint generated by default as identity, abreviatura varchar(25), denominacion varchar(255), primary key (id))
Hibernate: create table usuario (rol tinyint check (rol between 0 and 2), fecha_alta timestamp(6), fecha_baja timestamp(6), fecha_modificacion timestamp(6), id bigint generated by default as identity, username varchar(255) not null, primary key (id))
Hibernate: create table venta (codigo_venta integer, importe_total float(24), id bigint generated by default as identity, primary key (id))
Hibernate: create table "venta-factura" (cantidad_venta_factura integer not null, "codigo-venta" bigint, fecha_desde timestamp(6), fecha_hasta timestamp(6), id bigint generated by default as identity, "venta-factura-id" bigint, primary key (id))
Hibernate: alter table if exists articulo_insumo add constraint FKkytvj88cp7kvkjf5vjvlpblho foreign key (id_unidad_medida) references unidad_medida
Hibernate: alter table if exists articulo_insumo add constraint FK8qkcn5ggnytd5fn8808574nv3 foreign key ("rubro-id") references rubro
Hibernate: alter table if exists cliente add constraint FKetx0tojxf5yevxcyt6qb526x5 foreign key (id_usuario) references usuario
Hibernate: alter table if exists detalle_factura add constraint FKhc4e7swi6aa3e6uom3bwm2x6x foreign key (id_factura) references factura
Hibernate: alter table if exists detalle_factura add constraint FKbtcmmj5awxvxq2gj65kx1v7ly foreign key (id_producto) references producto
Hibernate: alter table if exists detalle_factura add constraint FKqf0fqe1o3cu7qvq566yr3yfs foreign key (id_articulo_insumo) references rubro
Hibernate: alter table if exists detalle_pedido add constraint FK7n9hdifr08joboojejveby1vr foreign key (id_pedido) references pedido
Hibernate: alter table if exists detalle_pedido add constraint FKjfm9pk0w2eag8tx8lu6pbego6 foreign key (id_producto) references producto
Hibernate: alter table if exists detalle_pedido add constraint FKfvxa66f496kp454d4r9nmn2ps foreign key (id_articulo_insumo) references rubro
Hibernate: alter table if exists detalle_producto add constraint FK48sk6vgfe3y4s2ulekjpl97s0 foreign key (id_articulo_insumo) references articulo_insumo
Hibernate: alter table if exists detalle_producto add constraint FK449952r1n0s4tet6xs0tymn8i foreign key (id_producto) references producto
Hibernate: alter table if exists detalle_producto add constraint FKaftx579ekl3pvkn1r9yv8ibi3 foreign key ("rubro-id") references rubro
Hibernate: alter table if exists domicilio add constraint FKraiknd1t92b2m079c8l40rfsp foreign key (id_cliente) references cliente
Hibernate: alter table if exists domicilio add constraint FKky9qf5mknfcpfhoknchrql0e5 foreign key ("id-empleado") references empleado
Hibernate: alter table if exists empleado add constraint FKt7vdal63o7rdoojoy7ywhjesh foreign key (id_usuario) references usuario
Hibernate: alter table if exists factura add constraint FKhf4qd2e07en591ymcp74t1ebj foreign key (id_pedido) references pedido
Hibernate: alter table if exists pedido add constraint FK9y4jnyp1hxqa386cnly0ay9uw foreign key (id_cliente) references cliente
Hibernate: alter table if exists pedido add constraint FK8rl5nj1o66wpyep4178lwdh70 foreign key (id_domicilio_entrega) references domicilio
Hibernate: alter table if exists rubro add constraint FKixsw6taiud5q4cccyu65ps12e foreign key (rubro_padre_id) references rubro
Hibernate: alter table if exists "venta-factura" add constraint FK521udo45nh1vqhxpbr4tet25u foreign key ("venta-factura-id") references factura
Hibernate: alter table if exists "venta-factura" add constraint FKs7bgb2onbb8jqcyb3nkpst6kp foreign key ("codigo-venta") references venta
2023-11-13T15:39:28.025-03:00  INFO 12412 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-11-13T15:39:28.391-03:00  INFO 12412 --- [    Test worker] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2023-11-13T15:39:29.321-03:00  WARN 12412 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-11-13T15:39:30.244-03:00  INFO 12412 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:file:./theWhiteHatsdb'
2023-11-13T15:39:30.317-03:00  INFO 12412 --- [    Test worker] c.d.Spring4.Spring3ApplicationTests      : Started Spring3ApplicationTests in 7.11 seconds (process running for 8.481)
----------------ESTOY----FUNCIONANDO---------------------
Hibernate: insert into unidad_medida (abreviatura,denominacion,fecha_alta,fecha_baja,fecha_modificacion,id) values (?,?,?,?,?,default)
Hibernate: insert into usuario (fecha_alta,fecha_baja,fecha_modificacion,rol,username,id) values (?,?,?,?,?,default)
Hibernate: insert into usuario (fecha_alta,fecha_baja,fecha_modificacion,rol,username,id) values (?,?,?,?,?,default)
Hibernate: insert into producto (costo,denominacion,descripcion,fecha_alta,fecha_baja,fecha_modificacion,precio_venta,tiempo_estimado_cocina,url_imagen,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into producto (costo,denominacion,descripcion,fecha_alta,fecha_baja,fecha_modificacion,precio_venta,tiempo_estimado_cocina,url_imagen,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into rubro (denominacion,fecha_alta,fecha_baja,fecha_modificacion,rubro_padre_id,id) values (?,?,?,?,?,default)
Hibernate: insert into rubro (denominacion,fecha_alta,fecha_baja,fecha_modificacion,rubro_padre_id,id) values (?,?,?,?,?,default)
Hibernate: insert into articulo_insumo (denominacion,fecha_alta,fecha_baja,fecha_modificacion,precio_compra,receta,stock_actual,stock_minimo,id_unidad_medida,url_imagen,id) values (?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into articulo_insumo (denominacion,fecha_alta,fecha_baja,fecha_modificacion,precio_compra,receta,stock_actual,stock_minimo,id_unidad_medida,url_imagen,id) values (?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into detalle_producto (id_articulo_insumo,cantidad,id_producto,rating,receta,id) values (?,?,?,?,?,default)
Hibernate: insert into detalle_producto (id_articulo_insumo,cantidad,id_producto,rating,receta,id) values (?,?,?,?,?,default)
Hibernate: update articulo_insumo set "rubro-id"=? where id=?
Hibernate: update articulo_insumo set "rubro-id"=? where id=?
Hibernate: update detalle_producto set "rubro-id"=? where id=?
Hibernate: update detalle_producto set "rubro-id"=? where id=?
Hibernate: insert into cliente (apellido,email,fecha_alta,fecha_baja,fecha_modificacion,nombre,telefono,id_usuario,id) values (?,?,?,?,?,?,?,?,default)
Hibernate: insert into empleado (apellido,email,fecha_alta,fecha_baja,fecha_modificacion,nombre,rol,telefono,id_usuario,id) values (?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into domicilio (calle,id_cliente,codigo_postal,"id-empleado",fecha_alta,fecha_baja,fecha_modificacion,localidad,numero,numero_vivienda,piso_vivienda,id) values (?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into domicilio (calle,id_cliente,codigo_postal,"id-empleado",fecha_alta,fecha_baja,fecha_modificacion,localidad,numero,numero_vivienda,piso_vivienda,id) values (?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into pedido (id_cliente,id_domicilio_entrega,estado,fecha_alta,fecha_baja,fecha_modificacion,fecha_pedido,forma_pago,hora_estimada_finalizacion,tipo_envio,total,total_costo,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into pedido (id_cliente,id_domicilio_entrega,estado,fecha_alta,fecha_baja,fecha_modificacion,fecha_pedido,forma_pago,hora_estimada_finalizacion,tipo_envio,total,total_costo,id) values (?,?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into detalle_pedido (cantidad,id_pedido,id_producto,id_articulo_insumo,subtotal,subtotal_costo,id) values (?,?,?,?,?,?,default)
Hibernate: insert into detalle_pedido (cantidad,id_pedido,id_producto,id_articulo_insumo,subtotal,subtotal_costo,id) values (?,?,?,?,?,?,default)
Hibernate: insert into factura (fecha_alta,fecha_baja,fecha_facturacion,fecha_modificacion,forma_pago,mp_merchant_order_id,mp_payment_id,mp_payment_type,mp_preference_id,id_pedido,total_venta,id) values (?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into factura (fecha_alta,fecha_baja,fecha_facturacion,fecha_modificacion,forma_pago,mp_merchant_order_id,mp_payment_id,mp_payment_type,mp_preference_id,id_pedido,total_venta,id) values (?,?,?,?,?,?,?,?,?,?,?,default)
Hibernate: insert into venta (codigo_venta,importe_total,id) values (?,?,default)
Hibernate: insert into "venta-factura" (cantidad_venta_factura,"venta-factura-id",fecha_desde,fecha_hasta,id) values (?,?,?,?,default)
Hibernate: insert into "venta-factura" (cantidad_venta_factura,"venta-factura-id",fecha_desde,fecha_hasta,id) values (?,?,?,?,default)
Hibernate: update "venta-factura" set "codigo-venta"=? where id=?
Hibernate: update "venta-factura" set "codigo-venta"=? where id=?
Hibernate: select v1_0.id,v1_0.cantidad_venta_factura,f1_0.id,f1_0.fecha_alta,f1_0.fecha_baja,f1_0.fecha_facturacion,f1_0.fecha_modificacion,f1_0.forma_pago,f1_0.mp_merchant_order_id,f1_0.mp_payment_id,f1_0.mp_payment_type,f1_0.mp_preference_id,p1_0.id,c1_0.id,c1_0.apellido,c1_0.email,c1_0.fecha_alta,c1_0.fecha_baja,c1_0.fecha_modificacion,c1_0.nombre,c1_0.telefono,u1_0.id,u1_0.fecha_alta,u1_0.fecha_baja,u1_0.fecha_modificacion,u1_0.rol,u1_0.username,d1_0.id,d1_0.calle,c2_0.id,c2_0.apellido,c2_0.email,c2_0.fecha_alta,c2_0.fecha_baja,c2_0.fecha_modificacion,c2_0.nombre,c2_0.telefono,u2_0.id,u2_0.fecha_alta,u2_0.fecha_baja,u2_0.fecha_modificacion,u2_0.rol,u2_0.username,d1_0.codigo_postal,e1_0.id,e1_0.apellido,e1_0.email,e1_0.fecha_alta,e1_0.fecha_baja,e1_0.fecha_modificacion,e1_0.nombre,e1_0.rol,e1_0.telefono,u3_0.id,u3_0.fecha_alta,u3_0.fecha_baja,u3_0.fecha_modificacion,u3_0.rol,u3_0.username,d1_0.fecha_alta,d1_0.fecha_baja,d1_0.fecha_modificacion,d1_0.localidad,d1_0.numero,d1_0.numero_vivienda,d1_0.piso_vivienda,p1_0.estado,p1_0.fecha_alta,p1_0.fecha_baja,p1_0.fecha_modificacion,p1_0.fecha_pedido,p1_0.forma_pago,p1_0.hora_estimada_finalizacion,p1_0.tipo_envio,p1_0.total,p1_0.total_costo,f1_0.total_venta,v1_0.fecha_desde,v1_0.fecha_hasta from "venta-factura" v1_0 left join factura f1_0 on f1_0.id=v1_0."venta-factura-id" left join pedido p1_0 on p1_0.id=f1_0.id_pedido left join cliente c1_0 on c1_0.id=p1_0.id_cliente left join usuario u1_0 on u1_0.id=c1_0.id_usuario left join domicilio d1_0 on d1_0.id=p1_0.id_domicilio_entrega left join cliente c2_0 on c2_0.id=d1_0.id_cliente left join usuario u2_0 on u2_0.id=c2_0.id_usuario left join empleado e1_0 on e1_0.id=d1_0."id-empleado" left join usuario u3_0 on u3_0.id=e1_0.id_usuario where v1_0.id=?
Hibernate: insert into detalle_factura (cantidad,id_factura,id_producto,id_articulo_insumo,subtotal,id) values (?,?,?,?,?,default)
Hibernate: select d1_0.id,a1_0.id,a1_0.denominacion,a1_0.fecha_alta,a1_0.fecha_baja,a1_0.fecha_modificacion,a1_0.precio_compra,a1_0.receta,a1_0.stock_actual,a1_0.stock_minimo,u1_0.id,u1_0.abreviatura,u1_0.denominacion,u1_0.fecha_alta,u1_0.fecha_baja,u1_0.fecha_modificacion,a1_0.url_imagen,d1_0.cantidad,p1_0.id,p1_0.costo,p1_0.denominacion,p1_0.descripcion,p1_0.fecha_alta,p1_0.fecha_baja,p1_0.fecha_modificacion,p1_0.precio_venta,p1_0.tiempo_estimado_cocina,p1_0.url_imagen,d1_0.rating,d1_0.receta from detalle_producto d1_0 left join articulo_insumo a1_0 on a1_0.id=d1_0.id_articulo_insumo left join unidad_medida u1_0 on u1_0.id=a1_0.id_unidad_medida left join producto p1_0 on p1_0.id=d1_0.id_producto where d1_0.id=?
Hibernate: select a1_0.id,a1_0.denominacion,a1_0.fecha_alta,a1_0.fecha_baja,a1_0.fecha_modificacion,a1_0.precio_compra,a1_0.receta,a1_0.stock_actual,a1_0.stock_minimo,u1_0.id,u1_0.abreviatura,u1_0.denominacion,u1_0.fecha_alta,u1_0.fecha_baja,u1_0.fecha_modificacion,a1_0.url_imagen from articulo_insumo a1_0 left join unidad_medida u1_0 on u1_0.id=a1_0.id_unidad_medida where a1_0.id=?
Hibernate: select a1_0.id,a1_0.denominacion,a1_0.fecha_alta,a1_0.fecha_baja,a1_0.fecha_modificacion,a1_0.precio_compra,a1_0.receta,a1_0.stock_actual,a1_0.stock_minimo,u1_0.id,u1_0.abreviatura,u1_0.denominacion,u1_0.fecha_alta,u1_0.fecha_baja,u1_0.fecha_modificacion,a1_0.url_imagen from articulo_insumo a1_0 left join unidad_medida u1_0 on u1_0.id=a1_0.id_unidad_medida where a1_0.id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
